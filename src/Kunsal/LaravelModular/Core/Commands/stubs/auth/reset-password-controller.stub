<?php

namespace App\Modules\Authenticators\Http\Controllers;

use Kunsal\LaravelModular\Core\Controllers\CoreController;
use App\Modules\Authenticators\Forms\ResetPasswordForm;
use Illuminate\Foundation\Auth\ResetsPasswords;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Kris\LaravelFormBuilder\FormBuilder;

class ResetPasswordController extends CoreController
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset requests
    | and uses a simple trait to include this behavior. You're free to
    | explore this trait and override any methods you wish to tweak.
    |
    */

    use ResetsPasswords;

    /**
     * Where to redirect users after resetting their password.
     *
     * @var string
     */
    protected $redirectTo;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
        //$this->redirectTo = route('login');
    }

    /**
     * Display the password reset view for the given token.
     *
     * If no token is present, display the link request form.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  string|null  $token
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function showResetForm(Request $request, $token = null, FormBuilder $formBuilder)
    {
        $form = $formBuilder->create(ResetPasswordForm::class, [
            'url' => route('reset.password.post', $token),
            'method' => 'post'
        ])->modify('email', 'email', [
            'default_value' => $request->email
        ])->add('token', 'hidden', ['default_value' => $token]);
        return view('Authenticators::reset-password')->with('form', $form)->with(
            ['token' => $token, 'email' => $request->email]
        );
    }

    /**
     * Reset the given user's password.
     *
     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
     * @param  string  $password
     * @return void
     */
    protected function resetPassword($user, $password)
    {
        $user->forceFill([
            'password' => $password,
            'remember_token' => Str::random(60),
        ])->save();

        // $this->guard()->login($user);
    }
}
